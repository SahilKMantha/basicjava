Constructor Overloading

What we have learned so far is a constructor is just like any other method which takes some inputs and has some method body ( code between {} ) with the exception of

You don't have choice on method name as its name is as same as class name
It does not have return type
    class Student{
        String name;

        Student(String name){
            this.name = name;
        }
    }
What this means is whatever we have learned method overloading works for constructors also ( as constructor is method)

    class Student{
        String name;
        int age;

        Student(String name){
            this.name = name;
        }

        Student(String name, int age){
            this.name = name;
            this.age = age;
        }
    }

    class Application{
        public static void main(String[] args){
            Student s1 = new Student("Joe");        // Uses the first constructor which takes only name
            Student s2 = new Student("Joe", 13);    // Uses the second constructor which takes both name and age.
        }
    }
Why Constructor is called Constructor?

As we have seen constructor is special method, but why it is called constructor? The reason is, you can use this method only when creating object and not any other time ( regular methods you can use as many times as you want)

 class Student{
        String name;
        int age;

        Student(String name){
            this.name = name;
        }

        Student(String name, int age){
            this.name = name;
            this.age = age;
        }

        void readBook(){

        }
    }

    class Application{
        public static void main(String[] args){
            // Method Student(String) is being used(called) while creating object s1
            Student s1 = new Student("Joe");        

            // Method Student(String,int) is being used(called) while creating object s2
            Student s2 = new Student("Joe", 13);    // Uses the second constructor which takes both name and age.

            // Below will not work as you cannot call constructor again.
            // s1.Student("bob");

            // You can call readBook more than once.
            s1.readBook();
            s1.readBook();
        }
    }
Method defining vs Method calling

You need to know the difference between method defining and then using it (or calling it).

Defining a method

When you defining a method you are creating a index card which contains the following

Name
Inputs
Outputs
Instructions
Preparing the index card with some instructions and giving it some name like below methoddefining

This is like you created this index card and put it in your pocket. Just because you have written instructions on a card does not mean somebody will follow it. You have to give this card to somebody and ask him to follow the instructions. While giving this card , if the card says any inputs , then you have to give inputs to that person and if the card says outputs, then you can expect from that person.

Using(calling) the method is ask them to follow the instruction in the card. methoddefining

Creating a index card(where you do once) is like defining method

Somebody using this card and following the instructions(taking inputs and giving outputs) is like using or calling where you can do more than once.

Methods calling other Methods

The method we have written readBook below will have generally multi steps, like checking out the book from library, reading the book and returning the book back to library.

    class Student{
        String name;
        
        Student(String name){
            this.name = name;
        }

        void readBook(String bookName){
            checkOutFromLibrary(bookName);
            readTheBook(bookName);
            returnBookToLibrary(bookName);
        }

        void checkOutFromLibrary(String bookName){
            System.out.println("Checking out book:" + bookName + " from library");
        }

        void readTheBook(String bookName){
            System.out.println("Read the book out book:" + bookName + " now");   
        }

        void returnBookToLibrary(String bookName){
            System.out.println("Returning the book:" + bookName + " back to library");
        }
    }

    class Application{
        public static void main(String[] args){
            Student s1 = new Student("Joe");
            s1.readBook("Harry Potter");
        }
    }
If you see above readBook calls the methods. When calling the methods inside its own class you can use just use the method name and any parameters. Here we are passing the same bookName

     void readBook(String bookName){
            checkOutFromLibrary(bookName);
            readTheBook(bookName);
            returnBookToLibrary(bookName);
        }
When you are calling readBook in Application class you are using the object name like below

class Application{
        public static void main(String[] args){
            Student s1 = new Student("Joe");
            s1.readBook("Harry Potter");
        }
    }
When inside class and calling the method which exists in the same class, then you can use just the method name.

Hiding the details

Lets say instead of asking the student to read the book, ask him to checkout from library, read the book and forget to return the book to library

class Application{
        public static void main(String[] args){
            Student s1 = new Student("Joe");
            s1.checkOutFromLibrary("Harry Potter");
            s1.readTheBook("Harry Potter");

            // forgot to ask him to return the book.
        }
    }
We have problem here. We are asking the student to do each individual step instead of asking him to read the book (and let him/her to figure it out how to get book) and also in the process we forgot to tell him/her to return the book. Student need not be told each and every step and instead of just readBook method should be enough. Student class should not allow to dictate individual steps by outside while reading book. What we should do is, not allow checkOutFromLibrary, readTheBook, returnToLibrary outside Student class and java allows this by specifying private keyword like below

        private void checkOutFromLibrary(String bookName){
            System.out.println("Checking out book:" + bookName + " from library");
        }

        private void readTheBook(String bookName){
            System.out.println("Read the book out book:" + bookName + " now");   
        }

        private void returnBookToLibrary(String bookName){
            System.out.println("Returning the book:" + bookName + " back to library");
        }
Now one cannot even call checkOutFromLibrary outside Student class and only method allowed is readBook. This way of hiding the details by using private keyword is part of one of the OOPs (Object Oriented Programming) principals called Encapsulation

Encapsulations has two parts

Hiding the details
Packaging related things.
In student we have only related to Student (name, age, grade) but not breed (which applies to animals)
