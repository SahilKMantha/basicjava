Variables

x=2 

x is variable because it can be changes
2 is constant because it stays the same


Data Types

  Q: What is your age?  
     A: 14
     Q: Which grade you are in? 
     A: 10

     Q: What is your name? 
     A: sairama
     Q: Which street you live in ? 
     A: Tucson

     Q: What is the price of bag?
     A: 24.50
     Q: What is 5/2?
     A: 2.5

     If you observe above data you can group them in 3 different categories
     (14,10)                   -> Numbers
     
     ("sairama", "Tucson")     -> Strings(series of alphabets)

     (24.50, 2.5)              -> Numbers with decimals


	Int (14,10) -> Numbers without decimals

String ("sairama", "Tucson")

double (24.50, 2.5) -> Numbers with decimals.

In algebra you don't specify type, but in Java programming you need to tell the program what kind of data you need.

Example

	int         age = 14;
    int         grade = 10;
    String      name = "sairama";
    String      street = "Tucson";
    double      bagPrice = 24.50;
    double      result = 2.5;

Datatype VariableName = value ;

Strings are represented in double quotes(""). Note : Not variables(ex:name) but their values (ex:"sairama")



SYNTAX

What is Syntax in Java programming?

it is grammar to programming just like you have grammar in English language.

Some of the examples for syntax is every statement in Java will end with a ';' (semicolon)

Another example is declaring variables like above where we start with datatype followed by space then variable and then = followed by value and ends with ; (int age = 14;)

Over the period of time we will be learning more syntax in Java.

IF STATEMENT

In real life you get different paths based on certain conditions. For example if you are more than 15 years old, then you can get driver permit. If the day is Sunday or Saturday you don't have to go to school. In Java programming also you can conditions and do things only that conditions match. This is represented by if , else if and else statements.

    int age = 13;

    if( age > 15){
        System.out.println("you can get drivers permit");
    }else if( age == 15){
        System.out.println("Congratulations. today is the day where you can apply for permit.");
    }else{
        System.out.println("Sorry, please wait till you get 15");
    }
In above program the syntax is

    if( anything that evaluates to true/false){

    }else if(anything that evaluates to true/false){

    }else{
        // Anything does not match above.
    }
In Java programming certain operators make the statement either true/false (you can think of yes/no). for example in above age > 15 the symbol > is used to check for greater than . So you can read the if( age is greater than 15 ) and if this is true(yes) then the block (block starts with { and ends with } ) will be executed (means program follows the instructions)

Next we have age == 15. Why == ( two equals)?.

In Java programming when we use single = it is called assignment, that is int age = 15 means we are assigning (setting) value 15 to variable age . After this the value of variable age will be 15 and before that it will be 0 (in Java if you don't specify anything to numbers by default they will be zero).

when we use double == it is called comparison, that is age == 15 means we asking is age equal to 15?. The answer can be either yes (true) or no(false).

Both if() and else if() take anything that can become yes or no statements. In future we will see complex conditions but ultimately the entire stuff ( whatever goes in between () )should be answered to yes or no

One can put multiple statements (instructions, remember we are telling to computer to do some stuff) between { and }

for example:

   int age = 13;

   if( age > 15){
       System.out.println("you can get drivers permit");
       System.out.println("you can drive now with an adult next to you");
       System.out.println("certain restrictions , apply");
   }else if( age == 15){
       System.out.println("Congratulations. today is the day where you can apply for permit.");
   }else{
       System.out.println("Sorry, please wait till you get 15");
   }

LOOPING(REPETITIONS)

Lets see how we can do this in Java programming

    int i;  // For counting in loops usually variable name 'i' is used 

    for(i=0 ; i<10 ; i++){
        System.out.println("running :" + (i+1));
    }
The above program will print running statement as 10 times.

Lets the syntax of for loop

    for( initialiation_onetime ; condition_which_should_return_true_or_false ; do_some_increment_which_runs_for_each_loop){
        somestatements_which_will_execute_aslongas_theconditionis_true
    }
Lets see how computer runs the above for program

Step-1 (only one time)

i=0
Step-2

i < 10 ( is 0<10, yes true)
Step-3

System.out.println("running " + (i+1)) ( prints "running 1")
Step-4

i=i+1 ( i will become 1)
Step-5

i<10 ( is 1<10 , yes true)
Step-6

System.out.println("running " + (i+1)) (prints "running 2")
...

...

...

Finally when i becomes 10 and the condition 10<10 becomes false and thats where the loop stops.

so if you observe the 3 parts in for loop are

initialiation -> one time

condition_which_should_return_true_or_false -> each loop time

do_some_increment_which_runs_for_each_loop -> each loop time.


